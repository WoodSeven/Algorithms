#include<iostream>
#include<vector>
#include<list>
#include<stack>
#include<limits.h>
using namespace std;

class AdjListNode
{
    int v,weight;
    public:
    AdjListNode(int vv,int w):v(vv),weight(w){}
    int getv(){return v;}
    int getw(){return weight;}
};

class Graph
{
    int V;
    vector<list<AdjListNode> >adj;
    void topologicalSortUtil(int v,vector<bool>&visited,stack<int>&Stack);
    public:
    Graph(int V);
    void addEdge(int u,int v,int weight);
    void shortestPath(int s);
};

Graph::Graph(int V)
{
    this ->V = V;
    adj.resize(V);
}

void Graph::addEdge(int u,int v,int weight)
{
    AdjListNode node(v,weight);
    adj[u].push_back(node);
}

void Graph::topologicalSortUtil(int v,vector<bool>&visited,stack<int>&Stack)
{
    visited[v] = true;
    list<AdjListNode>::iterator i;
    for(i = adj[v].begin();i != adj[v].end();i++)
        if(!visited[(*i).getv()])
            topologicalSortUtil((*i).getv(),visited,Stack);
    Stack.push(v);
}

void Graph::shortestPath(int s)
{
    stack<int>Stack;
    vector<bool>visited(V,false);
    for(int i = 0;i < V;i++)
        if(!visited[i])
            topologicalSortUtil(i,visited,Stack);
    vector<int>dist(V,INT_MAX);
    dist[s] = 0;
    while(!Stack.empty())
    {
        int u = Stack.top();
        Stack.pop();
        list<AdjListNode>::iterator it;
        if(dist[u] != INT_MAX)
        {
            for(it = adj[u].begin();it != adj[u].end();it++)
                if(dist[(*it).getv()] > dist[u] + (*it).getw())
                    dist[(*it).getv()] = dist[u] + (*it).getw();
        }
    }
    for(int i = 0;i < V;i++)
        (dist[i] == INT_MAX) ? cout<<"INF " : cout<<dist[i]<<" ";
    cout<<endl;
}

int main()
{
    // Create a graph given in the above diagram.  Here vertex numbers are
    // 0, 1, 2, 3, 4, 5 with following mappings:
    // 0=r, 1=s, 2=t, 3=x, 4=y, 5=z
    Graph g(6);
    g.addEdge(0, 1, 5);
    g.addEdge(0, 2, 3);
    g.addEdge(1, 3, 6);
    g.addEdge(1, 2, 2);
    g.addEdge(2, 4, 4);
    g.addEdge(2, 5, 2);
    g.addEdge(2, 3, 7);
    g.addEdge(3, 4, -1);
    g.addEdge(4, 5, -2);

    int s = 1;
    cout << "Following are shortest distances from source " << s <<" \n";
    g.shortestPath(s);

    return 0;
}

#include<iostream>
#include<vector>
#include<limits.h>
using namespace std;

class Edge
{
    public:
    int src,dst,weight;
};

class Graph
{
    public:
    int V,E;
    vector<Edge>edge;
};

Graph* createGraph(int V,int E)
{
    Graph *graph = new Graph();
    graph ->E = E;
    graph ->V = V;
    (graph->edge).resize(E);
    return graph;
}

void printDistance(vector<int>dist)
{
    for(int i = 0;i < dist.size();i++)
        cout<<"Vertex "<<i<<" Distance from source "<<dist[i]<<endl;
}

void Bellman_Ford(Graph* graph,int src)
{
    int V = graph ->V;
    int E = graph ->E;
    vector<int>dist(V,INT_MAX);
    dist[0] = 0;
    for(int i = 1;i < V;i++)
    {
        for(int j = 0;j < E;j++)
        {
            int u = (graph->edge[j]).src;
            int v = (graph->edge[j]).dst;
            int w = (graph->edge[j]).weight;
            if(dist[u] + w < dist[v])
                dist[v] = dist[u] + w;
        }
    }

    for(int i = 0;i < E;i++)
    {
        int u = (graph->edge[i]).src;
        int v = (graph->edge[i]).dst;
        int w = (graph->edge[i]).weight;
        if(dist[u] + w < dist[v])
            cout<<"Graph contains negative weight cycle";
    }
    printDistance(dist);
}
int main()
{
    int V = 5;  // Number of vertices in graph
    int E = 8;  // Number of edges in graph
    Graph* graph = createGraph(V, E);
    // add edge 0-1 (or A-B in above figure)
    graph->edge[0].src = 0;
    graph->edge[0].dst = 1;
    graph->edge[0].weight = -1;

    // add edge 0-2 (or A-C in above figure)
    graph->edge[1].src = 0;
    graph->edge[1].dst = 2;
    graph->edge[1].weight = 4;

    // add edge 1-2 (or B-C in above figure)
    graph->edge[2].src = 1;
    graph->edge[2].dst = 2;
    graph->edge[2].weight = 3;

    // add edge 1-3 (or B-D in above figure)
    graph->edge[3].src = 1;
    graph->edge[3].dst = 3;
    graph->edge[3].weight = 2;

    // add edge 1-4 (or A-E in above figure)
    graph->edge[4].src = 1;
    graph->edge[4].dst = 4;
    graph->edge[4].weight = 2;

    // add edge 3-2 (or D-C in above figure)
    graph->edge[5].src = 3;
    graph->edge[5].dst = 2;
    graph->edge[5].weight = 5;

    // add edge 3-1 (or D-B in above figure)
    graph->edge[6].src = 3;
    graph->edge[6].dst = 1;
    graph->edge[6].weight = 1;

    // add edge 4-3 (or E-D in above figure)
    graph->edge[7].src = 4;
    graph->edge[7].dst = 3;
    graph->edge[7].weight = -3;

    Bellman_Ford(graph, 0);

    return 0;
}

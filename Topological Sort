#include<iostream>
#include<vector>
#include<list>
#include<stack>
using namespace std;

class Graph
{
    int V;
    vector<list<int> >adj;
    void topologicalSortUtil(int v,vector<bool>&visited,stack<int>&Stack);
    public:
    Graph(int V);
    void addEdge(int v,int u);
    void topologicalSort();
};

Graph::Graph(int V)
{
    this->V = V;
    adj.resize(V);
}

void Graph::addEdge(int v,int u)
{
    adj[v].push_back(u);
}

/*Recur for all the vertices adjacent to this vertex */
void Graph::topologicalSortUtil(int v,vector<bool>&visited,stack<int>&Stack)
{
    visited[v] = true;
    list<int>::iterator i;
    for(i = adj[v].begin();i != adj[v].end();i++)
        if(!visited[*i])
            topologicalSortUtil(*i,visited,Stack);
    Stack.push(v);
}

void Graph::topologicalSort()
{
    stack<int>Stack;
    vector<bool>visited(V,false);
    for(int i = 0;i < V;i++)
        if(!visited[i])
            topologicalSortUtil(i,visited,Stack);
    while(!Stack.empty())
    {
        cout<<Stack.top()<<" ";
        Stack.pop();
    }
    cout<<endl;
}

int main()
{
    // Create a graph given in the above diagram
    Graph g(6);
    g.addEdge(5, 2);
    g.addEdge(5, 0);
    g.addEdge(4, 0);
    g.addEdge(4, 1);
    g.addEdge(2, 3);
    g.addEdge(3, 1);

    cout << "Following is a Topological Sort of the given graph \n";
    g.topologicalSort();

    return 0;
}
